/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&to>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_caps_word {
            timeout-ms = <100>;
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        combo_esc {
            timeout-ms = <100>;
            bindings = <&kp ESC>;
            key-positions = <1 2>;
        };

        combo_tab {
            timeout-ms = <100>;
            bindings = <&kp TAB>;
            key-positions = <14 15>;
        };

        combo_lhand_ctrl {
            timeout-ms = <100>;
            bindings = <&kp LCTRL>;
            key-positions = <26 28>;
        };

        combo_rhand_ctrl {
            timeout-ms = <100>;
            bindings = <&kp LCTRL>;
            key-positions = <31 33>;
        };

        combo_backspace {
            timeout-ms = <100>;
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        combo_quotes {
            timeout-ms = <100>;
            bindings = <&td DOUBLE_QUOTES SINGLE_QUOTE>;
            key-positions = <20 21>;
        };

        combo_lhand_shift {
            timeout-ms = <100>;
            bindings = <&kp LSHFT>;
            key-positions = <16 15>;
        };

        combo_rhand_shift {
            timeout-ms = <100>;
            bindings = <&kp LSHIFT>;
            key-positions = <19 20>;
        };

        caps_lock {
            timeout-ms = <100>;
            bindings = <&kp CAPSLOCK>;
            key-positions = <15 16 19 20>;
        };

        alt_combo {
            timeout-ms = <100>;
            bindings = <&kp LALT>;
            key-positions = <28 29>;
        };
    };

    macros {
        lint: lint {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp I &kp N &kp T>;
            label = "LINT";
        };
        dev: dev {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp V>;
            label = "DEV";
        };
        collapse: collapse {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp LG(LEFT_BRACKET)>;
            label = "COLLAPSE";
        };
        expand: expand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(K) &kp LG(RIGHT_BRACKET)>;
            label = "EXPAND";
        };
        lint_fix: lint_fix {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp I &kp N &kp T &kp COLON &kp F &kp I &kp X>;
            label = "LINT_FIX";
        };
        pre_commit: pre_commit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp R &kp E &kp MINUS &kp C &kp O &kp M &kp M &kp I &kp T>;
            label = "PRE_COMMIT";
        };
        npm_run: npm_run {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp P &kp M &kp SPACE &kp R &kp U &kp N &kp SPACE>;
            label = "NPM_RUN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_layer {
            // ----------------------------------- QWERTY -------------------------------------------------
            // | ESC  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | TAB  |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | CTRL |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ALT  |
            //                    | ENT | LWR | GUI |   | SPC |      |shift|

            bindings = <
&kp ESC    &kp Q  &kp W  &kp E    &kp R        &kp T       &kp Y      &kp U        &kp I      &kp O    &kp P              &kp BSPC
&kp TAB    &kp A  &kp S  &kp D    &kp F        &kp G       &kp H      &kp J        &kp K      &kp L    &td LS(SEMI) SEMI  &td LS(SQT) SQT
&kp LCTRL  &kp Z  &kp X  &kp C    &kp V        &kp B       &kp N      &kp M        &kp COMMA  &kp DOT  &td LS(FSLH) FSLH  &kp LSHFT
                         &kp RET  &mo_tog 2 1  &kp LGUI    &kp SPACE  &mo_tog 3 0  &kp LALT
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  |      | 
            // |      |  \  |  *  |  +  |  -  |  =  |   |  <  |  {   |  (  |  [  |     |      |
            // |      |  `  |  _  |  #  |  %  | "|" |   |  >  | f12  |     |     |     |      |
            //                    | GUI | RSE | SPC |   | ENT |QWERTY| ALT |

            bindings = <
&trans  &td LS(N1) N1        &td LS(N2) N2  &td LS(N3) N3  &td LS(N4) N4  &td LS(N5) N5    &td LS(N6) N6   &td LS(N7) N7  &td LS(N8) N8  &td LS(N9) N9  &td LS(N0) N0  &trans
&trans  &kp BSLH             &kp AMPS       &kp PLUS       &kp MINUS      &kp EQUAL        &td GT LT       &td RBRC LBRC  &td RPAR LPAR  &td RBKT LBKT  &trans         &trans
&trans  &td LS(GRAVE) GRAVE  &kp UNDER      &kp HASH       &kp PRCNT      &kp PIPE         &kp LS(PERIOD)  &kp F12        &trans         &trans         &trans         &trans
                                            &trans         &trans         &trans           &trans          &mo_tog 3 0    &trans
            >;
        };

        direction_layer {
            // -----------------------------------------------------------------------------------------
            // |      |pref ble| bl0 | bl1 | bl2 |power|   |     | HOME| UP  | END |     |power toggle|
            // |      |        |     |     |     |btclr|   |     | LFT | DWN | RGT |     |      |
            // |      |        |     |     |     |     |   |     |     |     |     |     |      |
            //                       | GUI | LWR | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &out OUT_BLE  &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &ext_power EP_ON    &collapse             &kp HOME      &kp UP    &kp END        &expand            &trans
&trans  &trans        &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &trans              &kp RG(LEFT_BRACKET)  &kp LEFT      &kp DOWN  &kp RIGHT      &kp RIGHT_BRACKET  &trans
&trans  &trans        &kp K_MUTE    &kp C_VOL_DN      &kp C_VOL_UP  &trans              &trans                &kp RA(LEFT)  &trans    &kp RA(RIGHT)  &trans             &trans
                                    &trans            &trans        &trans              &trans                &trans        &trans
            >;
        };

        number_layer {
            bindings = <
&trans  &trans  &trans  &trans         &trans         &trans    &trans           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
&trans  &trans  &trans  &kp DELETE     &kp RS(RA(F))  &trans    &kp KP_NUMBER_0  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans  &trans  &trans  &kp LS(LG(C))  &trans         &trans    &trans           &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
                        &trans         &trans         &trans    &trans           &trans           &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};

/*
*
* keys to add
*
* mouse keys 
* media keys for play/pause skip and volume.
* cut copy paste undo redo vsCode shortcuts for things
* &bt BT_CLR
*/
